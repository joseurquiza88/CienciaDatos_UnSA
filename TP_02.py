# -*- coding: utf-8 -*-
"""Trabajo Practico_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q-R-HBwWMX2VN4YSDA62y6gKF9gXlhUM

# Introducción a NumPy




Este Práctico proporciona una introducción básica a NumPy, destacando algunas de sus características clave y mostrando ejemplos de su uso. A continuación tendrán un resúmen de algunos comando y su implementación. Esto servirá de guia para desarrollar las actividades propuestas a continuación.

## Comparación entre uso de vectores de Python y NumPy
A continuación se presentan varios aspectos para poder comparar la implementación de vectores a través del tipo de datos LISTA , comparado con la implementación de vectores con NumPy:

#### 1- Creación de vectores

En esta celda, se importa la biblioteca NumPy y se **CREA UN VECTOR** utilizando Python puro y NumPy. Luego, se imprime cada uno de los vectores.
"""

import numpy as np
vector_py = [1, 2, 3, 4, 5]
vector_np = np.array([1, 2, 3.5, 4, 5])
print("Vector en Python puro:", vector_py)
print("Vector en NumPy:", vector_np)
print(type(vector_py))
print(type(vector_np))

"""#### 2- Operaciones matemáticas
En esta celda, se realizan operaciones matemáticas en un vector utilizando Python puro y NumPy. Luego, se imprime el resultado de cada operación.
"""

vector_py = [1, 2, 3, 4, 5]
vector_np = np.array([1, 2, 3, 4, 5])
suma_py = [x + 2 for x in vector_py]

suma_np = vector_np *2
print("Suma en Python puro:", suma_py)
print("Suma en NumPy:", suma_np)
vector_py*2

"""#### 3- Indexado y segmentación
En esta celda, se realiza el indexado y segmentación en un vector utilizando Python puro y NumPy. Luego, se imprime el resultado de cada operación.
"""

vector_py = [1, 2, 3, 4, 5]
vector_np = np.array([1, 2, 3, 4, 5])
segmento_py = vector_py[1:4]
segmento_np = vector_np[1:4]
print("Segmento en Python puro:", segmento_py)
print("Segmento en NumPy:", segmento_np)

"""## Operaciones entre vectores y funciones sobre vectores
A continuación se presentan algunos ejemplos de operaciones básicas entre vectores utilizando NumPy:

#### Suma de vectores
En esta celda, se crea un vector 'vector_a' y un vector 'vector_b', y se realiza la suma de ambos vectores utilizando NumPy. Luego, se imprime el resultado.
"""

vector_a = np.array([1, 2, 3])
vector_b = np.array([4, 5, 6])
suma_vector = vector_a + vector_b
print("Suma de vectores:", suma_vector)

"""# ***EJERCICIOS PARTE 1***

***EJERCICIO 1:***

Dada la siguiente tabla (matriz) de datos, donde cada fila representa la cantidad que se vendio en referencia a un solo producto durante toda la semana; mientras que cada columna representa la venta total en un dia de la semana.Obtener la siguiente información detallada:


*   Importe total de la venta por cada dia de la semana
*   Importe total de la venta por cada producto en la semana
*   Importe total de la venta en toda la semana


"""

import numpy as np


# Datos de ventas diarias de 4 productos durante una semana

ventas_diarias = np.array(
    #Lun,Mar,Mie,Jue,Vie,Sab,Dom
    [[20, 15, 25, 30, 18, 22, 24],  #Producto A
    [12, 20, 14, 8, 15, 18, 16],    #Producto B
    [35, 28, 32, 30, 26, 24, 30],   #Producto C
    [40, 38, 45, 42, 39, 41, 37]    #Producto D
    ]
)
#print(ventas_diarias[1,2])# fila, columna
# print("Matriz de ventas diarias:",ventas_diarias)

# ==== FORMAS DE RECORRER UNA MATRIZ FIJADA LA COLUMNA J=1
#    Calcula la suma total del dia lunes
suma=0
for i in range(4):
 # print(ventas_diarias[i,1])# sumando los datos de la columna 1
  suma=suma+ventas_diarias[i,1]
#print('la suma total del lunes es:', suma)

# ===== IMPLEMENTACIÓN DE UN MÉTODO DE NUMPY

# Sumar las ventas por día (sumar las columnas)
ventas_por_dia = np.sum(ventas_diarias, axis=0)
print("Total de ventas por día:",ventas_por_dia)

type(ventas_diarias)

#Importe total de la venta por cada dia de la semana
# mediante la propiedad axis, es posible indicarle que se desea la suma de las filas (1) o columnas (0).
ventas_por_dia = np.sum(ventas_diarias, axis=0)
print("Total de ventas por día:",ventas_por_dia)
#Importe total de la venta por cada producto en la semana
ventas_por_producto = np.sum(ventas_diarias, axis=1)
print("Total de ventas por producto:",ventas_por_producto)
#Importe total de la venta en toda la semana
ventas_tot = np.sum(ventas_diarias)
print("Las ventas totales fueron de:",ventas_tot)

"""**EJERCICIO 2:**

Crear un programa donde se le pida al usuario que ingrese la cantidad de elementos de una lista de números reales positivos. Luego Convertir esa lista en un vector de Numpy.


"""

# Solicito al usuario cuantos numeros quiere ingresar a la lista
cantidad_num2eros = int(input("Cuantos numeros quieres ingesar? "))
# Genero una lista vacia para luego ir rellenandola
lista_numeros = []
# Solicito al usuario ingrese una serie de numeros. Cuantos? el numero de veces que el usuario ingreso al principio
for x in range (cantidad_numeros):
  # Le solicita al usuario un numero
  numero_ingresado = int(input("Puedes ingresar un numero "))
  # Guardo en la lista vacia, los numero ingresados
  lista_numeros.append(numero_ingresado)
# Transformo la lista en un vector de numpy
listaNumpy =  np.array(lista_numeros)
print(listaNumpy)
# Tipo de objeto => numpy.ndarray
type(listaNumpy)

"""
**Ejercicio 3:**

Crear un programa donde el usuario ingrese la cantidad de filas y columnas que tendra una tabla de datos. Luego el programa pedira ingresar los datos de la tabla fila por fila. Todos los datos serán numéricos.

Mostrar la tabla ingresada en formato LISTA de Python, y mostrar la misma tabla en formato array de Numpy.

Solicitar al usuario que ingrese las posiciones de dos filas y realice la suma  de las mismas. Mostrar este vector resultado."""

# PROGRAMA CON NUMPY
filas = int (input("Numero de filas: "))
columnas = int (input("Numero de columnas: "))
## Creamos una matriz vacía con las dimensiones especificadas por el usuario
matrizNumpy = np.zeros([filas,columnas])
# Llenar la matriz con valores utilizando un bucle for
for i in range(filas):
  for j in range(columnas):
    num_columna = int (input("Ingrese un numero para colocar en la matriz "))
    matrizNumpy[i, j] = num_columna # Puedes asignar cualquier valor a cada elemento según tu necesidad

print(matrizNumpy)
type(matrizNumpy)

# PROGRAMA CON PYTHON
filas = int (input("Numero de filas: "))
columnas = int (input("Numero de columnas: "))
# Creamos una lista vacia por afuera del for. Es en esta lista donde se van a guardar las listas generadas segun la dimesion ingresada (filas x columnas)
matrizPython = []
# Primero recorro filas
for i in range(filas):
  # Se crea una lista por cada fila. Cuando se crea una nueva fila, esta vuelve a ser una lista vacia
  # print(listaFilas)
  listaFilas = []
  # Recorro columnas
  for j in range(columnas):
    # Pedimos que el usuario ingrese valor
    num_columna = int (input("Ingrese un numero para colocar en la matriz "))
    # Guardo el dato de cada fila
    listaFilas.append(num_columna)
  # Guardo toda la lista en la lista general
  matrizPython.append(listaFilas)

# Resultados
print(matrizPython)
print(type(matrizPython))

print(f'La lista generada con PYTHON es {matrizPython} donde la clase es {type(matrizPython)}')
print(f'La lista generada en NUMPY es {matrizNumpy} donde la clase es {type(matrizNumpy)}')

"""
**Ejercicio 4:**


A continuación se muestran los valores de  los siguientes productos:

['arroz', 'harina','fideo','yerba','azucar']=[145.6 , 100 , 89.90 , 700 , 95]

Los valores de estos productos son aproximados de hace dos meses, debido a la inflación y alza de los precios, se vieron afectados de la siguiente manera:
*   Producto arroz , harina, azucar duplicaron su precio
*   Productos restantes incrementaron en un 75% su precio

Mostrar los datos en forma de vector y actualizar sus precios, de manera que se pueda comparar ambos vectores."""

# Usamos numpy para hacer calculos
#Array de productos
productos = np.array(['arroz', 'harina','fideo','yerba','azucar']) # string
#Array de precios original
preciosOriginal = np.array([145.6 , 100 , 89.90 , 700 , 95]) # Float
#Array con el % de auto de cada producto
aumento = np.array([100, 100, 75, 75, 100]) #Int
#Calculamos el precio actualizado considerando el % de aumento
precioActualizado = preciosOriginal * (1 + aumento / 100)

# Imprimimos listas
print(f"Lista de productos: {productos}")
print(f"Lista de precios originales de los productos: {preciosOriginal}")
print(f"Lista de precios actualizado de los productos: {precioActualizado}")

"""***EJERCICIO 5***

Completar la siguiente tabla de comandos y funciones que se utilizarán sobre vectores definidos a través de Numpy

|    | Comando | operación y funcionalidad |resultado | ejemplo |
|---|    ---   |               ---         |    ---   |    ---  |
1   | np.array([lista])|     crea un vector o table con Numpy  |  matriz   |np.array([1.6, 2, 0, 6.75])
2   |np.sqrt(vector)|       ***   |  *** |  np.sqrt(vector_np)
3   |np.random.rand(n)|     ***   |  *** | np.random.rand(5)
4   |np.ones((n))|          ***   |  *** | np.ones((3))
5   |np.zeros((n))|         ***   |  *** | np.zeros((3))
6   | np.min(array)|        ***   |valor mínimo| np.min(vector_np)
7   | np.max(array)|        ***   |valor máximo| np.max(vector_np)
8   | np.where(CONDICIÓN SOBRE EL VECTOR)| *** |***|np.where(vector_np>1)
9   |np.random.shuffle(MATRIZ)|   ***  | *** | VER EJERCICIO PARTE 2
10  |array.shape[n], n=0,1 |   ****   | *** | VER EJERCICIO PARTE 2
11  |np.sum(array, axis=n), n=0,1|  ***| *** |VER EJERCICIO PARTE 1
12  |np.arange(a, b, p)|  ***  | *** |np.arange(0, 10, 0.1) VER EJERCICIOS PARTE 3



"""

# Pruebas de comandos numpy
lista = [1,2,3,4,5]

#01 crea un vector o table con Numpy	matriz
comando1 = np.array([lista])
# print(comando1)

#02 Calcula la raiz cuadrada de la lista ingresada como argumento. Devuelve una matriz con los resultados
comando2 = np.sqrt(lista)
#print(comando2,type(comando2))

#03 Genera un array del tamaño indicado como argumento, Los valores correspoden a números aleatorios extraídos del intervalo [0, 1).
# Devuelve una matriz con los resultados
comando3 = 	np.random.rand(5)
#print(comando3,type(comando3))

#04 Genera un array del tamaño indicado como argumento. Los valores son todos iguales a 1
# Devuelve una matriz con los resultados.
#Porque se pone con doble parentesis ??? (())
comando4 = 	np.ones((3))
#comando4 = 	np.ones (3)
#print(comando4,type(comando4))

#05 Genera un array del tamaño indicado como argumento. Los valores son todos iguales a 0
# Devuelve una matriz con los resultados.
#Porque se pone con doble parentesis ??? (())
comando5 = 	np.zeros((3))
#print(comando5,type(comando5))


#06 Se debe ingresar un vector como argumento. Devuelve el valor minimo de la lista
comando6 = 	np.min(lista)
#print(comando6,type(comando6))

#07 Se debe ingresar un vector como argumento. Devuelve el valor maximo de la lista
comando7 = 	np.max(lista)
#print(comando7,type(comando7))

#08 Se debe ingresar un vector como argumento y una condicion.
#La función numpy. where acepta como argumentos de entrada una condición y dos estructuras tipo array, x e y,
# y devuelve valores de x o de y en función de que se cumpla o no la condición: Si se cumple, se devuelve el valor de x.
# Devuelve un objeto de tipo tupla ([],[])
# Es decir que devuelve los valores en donde se cumple la condicion, por ejemplo los  numeros mayor a 2
comando8 = 	np.where(comando1>2)
#print(comando8,type(comando8))


#09 Se debe ingresar un vector como argumento. Se cambia el orden de los subconjuntos, pero su contenido sigue siendo el mismo.
vectorDesordenado = np.array(["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"])
np.random.shuffle(vectorDesordenado)
#print(vectorDesordenado)

#10 Devuelve un arreglo (tupla) que indica el número de filas y el número de columnas (filas, columnas).
# se debe ingresar un arreglo
array = np.array([[1,2,3,4,5,6],[7,8,9,10,11,12]])
comando10 = 	array.shape
#print(comando10,type(comando10))

#11 Se debe ingresar un vector como argumento. Devuelve el valor de la suma de todos los valores del array
comando11 = 	np.sum(array)
#print(comando11,type(comando11))

#12 Se genera un conjunto de números entre un valor de inicio y uno final. Se puede ungresar un tercer parametro que corresponde al incremento entre los valores
# Si no se detalla el tercer paametro, se toma como que es igual a 1
# Devuelve un array de numpy
comando12 = 	np.arange(0, 10, 0.1)
print(comando12,type(comando12))

"""#  Funciones matemáticas sobre vectores
En esta sección, se aplican funciones matemáticas a un vector utilizando Python puro y NumPy. Luego, se imprime el resultado de cada función.

**ACLARACIÓN:** Estas funciones utilizan funciones y operaciones elementales matemáticas, sobre cada una de las posiciones del vector. Pero en general, se pueden definir funciones matemáticas que relacionan diferentes posiciones de un vector.
"""



import math
vector_py = [1, 2, 3, 4, 5]
vector_np = np.array([1, 2, 3, 4, 5])
raiz_cuadrada_py = [math.sqrt(x) for x in vector_py]
vector_cuad=[(x**2) for x in vector_np]
vector_log=[math.log(x) for x in vector_np]
raiz_cuadrada_np = np.sqrt(vector_np)
vector_npLog=np.log(vector_np)
print("Raíz cuadrada en Python puro:", raiz_cuadrada_py)
print("Raíz cuadrada en NumPy:", raiz_cuadrada_np)
print('Vector al cuadrado en Python: ',vector_cuad)
print('logaritmo de un Vector en Python: ',vector_log)
print('logaritmo de un Vector en Numpy: ',vector_npLog)

"""####  Rendimiento
En esta celda, se mide el rendimiento de operaciones en un vector utilizando Python puro y NumPy. Se imprime el tiempo de ejecución de cada operación.
"""

import time
vector_py = [i for i in range(1000000)]
vector_np = np.arange(1000000)

start_time = time.time()
[x * 2 for x in vector_py]
end_time = time.time()
print("Tiempo en Python puro:", end_time - start_time, "segundos")

start_time = time.time()
end_time = time.time()
print("Tiempo en NumPy:", end_time - start_time, "segundos")

"""## Redimensionar un NumPy
A continuación se presentan dos ejemplos de redimensionamiento de un NumPy:

#### Redimensionamiento 1
En esta celda, se crea un NumPy 'array' y se utiliza la función reshape() de NumPy para redimensionarlo a una forma diferente. Luego, se imprime el nuevo array.
"""

array = np.array([1, 2, 3, 4, 5, 6])
nuevo_array = array.reshape((2, 3)) #Lo redimensiona con 2 filas y 3 columnas
print("Primer array ", array)
print("Nuevo array redimensionado:", nuevo_array)

"""#### Redimensionamiento 2
En esta celda, se crea un NumPy 'array' y se utiliza la función np.resize() de NumPy para redimensionarlo a una forma diferente. Luego, se imprime el nuevo array.
"""

array = np.array([1, 2, 3, 4, 5, 6])
nuevo_array = np.resize(array, (2, 3))
print("Nuevo array redimensionado:", nuevo_array)

# https://stackoverflow.com/questions/41518351/what-is-the-difference-between-resize-and-reshape-when-using-arrays-in-numpy
'''
One major difference is reshape() does not change your data, but resize() does change it.
resize() first accommodates all the values in the original array. After that, if extra space is there (or size of new array is greater than original array), it adds its own values
'''

"""# ***EJERCICIOS PARTE 2***

**Ejercicio 1:**

Dado una matriz de datos, dividir el 70% de filas en un array_entrenamiento y el otro 30% en otro array_testeo. Esta distribución de filas de la matriz inicial, debe ser aleatoria. Mostrar las matrices al ser modificadas por el comando np.random.shuffle('matriz'). Finalmente mostrar los array_entrenamiento y array_testeo.
"""

dataset = np.array([[25, 1, 7, 100, 1],
                    [30, 2, 5, 120, 0],
                    [22, 1, 6, 80, 1],
                    [28, 1, 6, 90, 0],
                    [35, 2, 4, 130, 1],
                    [32, 2, 6, 110, 1],
                    [26, 1, 8, 95, 1],
                    [24, 1, 5, 85, 0],
                    [29, 2, 7, 115, 1],
                    [31, 2, 6, 105, 0]])
# Primero se mezclan las filas de la matriz para obtener una distribución aleatoria de los datos
np.random.shuffle(dataset)

# Generamos array de entrenamiento y de testeo
# Tomamos los datos desde el 0-7 datos (70%)
array_entrenamiento = dataset[:int((len(dataset))* 0.7)]

# Tomamos los ultimos 3 datos (30%). Considerando la longitud desde el 7 hasta el ultimo valor
array_testeo = dataset[int((len(dataset))*0.7):]

# Resultados
print(f"Longitud del dataset completo: {len(dataset)}")
print(f"Longitud del array de entrenamiento: {len(array_entrenamiento)}")
print(f"Longitud del array de testeo: {len(array_testeo)}")
print("--------   DATASET ORIGINAL MEZCLADO   --------")
print( dataset)
print("--------   DATASET ENTRENAMIENTO   --------")
print(array_entrenamiento)
print("--------   DATASET ENTRENAMIENTO   --------")
print(array_testeo)

"""**Ejercicio 2:**

Dado la siguiente tabla de datos poblaciones de las Provincias de Argentina (Ejercicio 10 del Práctico 1), Realizar el siguiente analisis.



*   indicar la cantidad de filas y columnas que posee la tabla de datos.
*   Mostrar toda la información de la provincia con Mayor Cantidad de habitantes. AYUDA: usar la función np.max(array)
*   Agregar a la tabla de datos una fila al final , indicando los totales de cada columna. Mostrar el resultado de la nueva tabla.


"""

poblacionArgentina1=[
    ['PROVINCIA','CANTIDAD DE HABITANTES','CONSUMO EN MWH','SUPERFICIE EN KM^2'],
    ['Buenos Aires','17569053',' 16543722',' 305907'],
    ['Córdoba','3978984',' 10606601','164708'],
    ['Santa Fe','3556522',' 13078203',' 133249'],
    ['Ciudad Autónoma de Buenos Aires','3120612','51712507',' 201'],
    ['Mendoza','2014533',' 5652519',' 149069'],
    ['Tucumán','1703186','3208711','22524'],
    ['Salta','1440672',' 2214796',' 155341'],
    ['Entre Ríos','1426426','3906353','78384'],
    ['Misiones','1280960','2845762',' 29911'],
    ['Corrientes','1197553','2997612',' 89123'],
    ['Chaco','1142963','3045380',' 99763'],
    ['Santiago del Estero','1054028',' 1811277',' 136934'],
    ['San Juan','818234',' 2381940',' 88296'],
   ['Jujuy','797955',' 1136336',' 53244'],
   ['Río Negro','762067',' 1984782','202169'],
   ['Neuquén','726590','1834879',' 94422'],
   ['Formosa','606041',' 1388311','75488'],
   ['Chubut','603120','1646029',' 224302'],
   ['San Luis','540905',' 1780881','75347'],
   ['Catamarca','429556',' 1337032','101486'],
   ['La Rioja','384607','1572290',' 91494'],
   ['La Pampa','366022','915781',' 143493'],
   ['Santa Cruz','333473',' 1025648',' 244458'],
   ['Tierra del Fuego, Antártida e Islas del Atlántico Sur','190641','0',' 37131']]

poblacionArgentina=np.array(poblacionArgentina1)

print(poblacionArgentina)

# Comentarios:
# Se cambiaron algunos datos a mano. Por ejemplo la cantidad de habitantes porque tenia . entre medio de los datos.
# Y no era posible pasarlo a int porque numpy no lo tomaba.
# El otro cambio fue el cosumo de Tierra del Fuego, que tenia s/d. Si bien es posible hacer una suma eliminando los NANs () con np.nansum()
# no era posible, porque primero habia que convertirlo en int y despues en
poblacionArgentina.shape

# Ejercicio 1
#indicar la cantidad de filas y columnas que posee la tabla de datos.
shape = poblacionArgentina.shape
print(f"Numero de filas =  {shape[0]}")
print(f"Numero de columnas =  {shape[1]} ")

# Ejercicio 2
#Mostrar toda la información de la provincia con Mayor Cantidad de habitantes. AYUDA: usar la función np.max(array)
# Problema! los valores estan en str
# Tomamos los valores de la columna de habitantes y la ponemos en formato int. Arrancamos el array en 1, porque el 0 corresponde al nombre de las columnas
habitantesInt = np.array(poblacionArgentina[1:,1],dtype = 'int64' )
# Obtenemos el valor maximo de habitantes, pero lo tranformamos en str para despues buscarlo
valorMaxHabitantes = str(np.max(habitantesInt))
#print(valorMaxHabitantes)

# Buscamos la ubicacion donde esta el valor de los habitantes
ubicacionMaxHabitantes = np.where(poblacionArgentina[:,1] == valorMaxHabitantes)
#print(ubicacionMaxHabitantes)

#Provincia con el numero mayor de habitantes
provincia = poblacionArgentina[ubicacionMaxHabitantes,]
#print(provincia)

# Ejercicio 3
#Agregar a la tabla de datos una fila al final , indicando los totales de cada columna. Mostrar el resultado de la nueva tabla.
# Obtengo la suma total de cada columna por separdo
habitantesTotal = sum(np.array(poblacionArgentina[1:,1],dtype = 'int64' ))
#print(habitantesTotal)
consumoTotal = np.nansum (np.array(poblacionArgentina[1:,2],dtype = 'int64' ))
#print(consumoTotal)
superficieTotal = np.nansum (np.array(poblacionArgentina[1:,3],dtype = 'int64' ))
#print(superficieTotal)
# Genero el vector con el total
vectorTotal = ["Total",habitantesTotal,consumoTotal,superficieTotal]
# Agrego el vectorTotal al vector original
poblacionArgentina_Total = np.append(poblacionArgentina,[vectorTotal], axis=0)
print(poblacionArgentina_Total)

"""# Ploteo de datos con Matplotlib
A continuación se presentan ejemplos de diferentes tipos de gráficos utilizando Matplotlib:

## Gráfica de funciones matemáticas elementales
En esta celda, se crea un array 'x' con valores en el rango de 0 a 10 y se utiliza la función np.sin() y np.cos() de NumPy para calcular el seno y coseno de cada valor en 'x'. Luego, se utiliza la biblioteca Matplotlib para trazar un gráfico de línea con 'x' en el eje x y 'y' en el eje y. También se agrega etiquetas y un título al gráfico.
"""

import matplotlib.pyplot as plt

x = np.arange(0, 10, 0.1)
y = np.cos(x)

plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Gráfico de línea')
plt.show()

"""# ***EJERCICIOS PARTE 3***

Realizar las gráficas de als siguientes expresiones matemáticas. Determinar el dominio del eje x adecuado para plotear las funciones de manera que se visualice su comportamiento.


*  $ y= 3x -2$
*   $y= 2x^2+4x+2 $
*   $y= \vert x\vert= \begin{cases}-x & x < 0 \\ x & x\ge 0                       \end{cases}$
*   $y= 1/x$
*   $y=\sqrt x$



"""



import matplotlib.pyplot as plt
#Funcion 1: y = 3x - 2
x = np.arange(0, 10, 1)
y = 3*x - 2

plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Funcion y = 3x - 2 ')
plt.show()

import matplotlib.pyplot as plt
#Funcion 2: y = 2x^2 + 4x + 2
x = np.arange(-50, 50,1)
y = 2*x**2 + 4*x + 2

plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Funcion 2: y = 2x^2 + 4x + 2')
plt.show()

import matplotlib.pyplot as plt
#Funcion 3: y = 3x - 2
x = np.arange(-10, 11, 1)
y = abs(x)

plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Funcion 3 y = |x|')
plt.show()

import matplotlib.pyplot as plt
#Funcion 4: y = 1/x
x = np.arange(-10, 0, 0.1)
y = 1/x

plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Funcion 4: 1/x')
plt.show()

import matplotlib.pyplot as plt
import math
#Funcion 5: y = sqrt(x)
x = np.arange(0, 1000, 0.1)
y = np.sqrt(x)

plt.plot(x, y)

plt.xlabel('x')
plt.ylabel('y')
plt.title('Funcion 5: sqrt(x)')
plt.show()