# -*- coding: utf-8 -*-
"""Copia de RESOLUCION_TP1_CienciaDeDatos.PDF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ANQh_HwOW5s9MVpFeN38g7WbMG0o9PJH

# Trabajo Practico N1
# Introduction al Dessarrollo en Python

**EJERCICIO 1**

Determinar si un numero ingresado por el usuario es PAR
"""

#Solicitamos un numero al usuario del tipo INT
num = int(input("Ingrese un numero "))
#Calculamos el resto
resto = num % 2
#print(resto)
# Si el resto es 0 es par, sino NO
if resto == 0:
  print(f'El numero ingresado {num} es par')
else:
  print(f'El numero ingresado {num} NO es par')

"""**EJERCICIO 2**

Determinar si un numero ingresado por el usuario esta DENTRO DEL RANGO [1,10] y es par. MUESTRE UN MENSAJE EN CASO CONTRARIO 'NÚMERO FUERA DEL RANGO'
"""

#Solicitamos un numero al usuario del tipo INT
num = int(input("Ingrese un numero "))
#Calculamos el resto
resto = num % 2
#print(resto)
# Verificamos si el numero es par y si esta en el rango [1:10]
if resto == 0 and num > 1 and num < 10:
  print(f'El numero ingresado {num} es par y esta dentro del rando [1,10]')
else:
  print(f'NÚMERO FUERA DEL RANGO')

"""**EJERCICIO 3 CICLO FOR**


Solicitar al usuario que ingrese 10 números. Calcule la suma de todos los números ingresados y  cuente cuántos de ellos son par.

"""

#Solicitamos al usuario 10 numeros
# A los numeros los guardamos en una lista
lista_numeros = []
for i in range(1, 11): # La generamos hasta 11 porque no incluye el 10
  num = int(input("Ingrese un numero "))
  # Los vamos guardando con append
  lista_numeros.append(num)

print(f'Los numeros ingresados son: {lista_numeros}')
suma_lista = sum(lista_numeros)
print(f'La suma de los valores ingesados es: {suma_lista}')

#Recorremos la lista con los valores para conocer cuantos valores son par
lista_par = []
for i in lista_numeros:
  #Calculamos el resto
  resto = i % 2
# # Si el resto es 0 es par, sino NO
  if resto == 0:
    par = 1
  else:
    par = 0
  lista_par.append(par)
suma_par = sum (lista_par)
print(f'En la lista se ingresaron {suma_par} numeros par')

"""**EJERCICIOS 4**

Mostrar todos los números presentes en el rango [56,1230]
Solicitar al usuario que ingrese el rango [a,b] y muestre todos los números pertenecientes a él.
"""

# Recordar que en python, el ultimo valor no lo incluye por eso hay que ponerle +1 para que incluya el valor
for i in range (56,1230+1):#65
  print(i)

inicio = 10
fin = 20
for i in range (inicio,fin+1):
  print(i)

"""**EJERCICIO 5 CICLO WHILE**

Solicitar al usuario que ingrese un número, si es negativo o nulo , solicitar reiteradamente hasta que ingrese un numero positivo.
"""

def numeros():
    while True:
        num = input("Por favor ingrese un número: ")
        #Si la celda esta vacia, se debe volver a ingesar valores
        if not num :
            print("El número no puede ser nulo. Por favor ingrese un número: ")
        # Si es l numero es negativo,  se debe volver a ingesar valores
        elif int(num) < 0 :
            print("El número debe ser positivo. Por favor ingrese un número.")
        # Sino devolver el numero
        else:
            return int(num)
# Prueba de la funcion
prueba_num_negativo = numeros()
print("Has ingresado un número positivo:", prueba_num_negativo)

"""chicos, si ingresan un dato nulo (vacio), debo usar un while para que vuelva a pedir lo mismo, pero si es un dato no nulo pasa y el valor lo transfomamos en entero,
y comparamos si es positivo. Si no lo es hay que pedir otro dato, pero puede ser nulo, entonces habría que hacer todo de nuevo. Por eso llamo en el  **else** a la funcion  **positivo**, para que inicie todo de nuevo.
recuerden que para ejecutar una funcion hay que llamarla con su nombre y parentesis. Ejemplo: positivo()

**EJERCICIO 6**

Solicitar al usuario que ingrese un número, si el número es positivo , solicitar reiteradamente hasta que ingrese un numero negativo. Luego mostrar dicho número si es par, en caso contrario mostrar un mensaje 'número ingresado impar'.
"""

def numeros_negativo():
    while True:
        #Si la celda esta vacia, se debe volver a ingesar valore
        num = input("Por favor ingrese un número negativo: ")
        if not num :
            print("El número no puede ser nulo. Por favor ingrese un número: ")
        # Si es el numero es positvo,  se debe volver a ingesar valores
        elif int(num) > 0 :
            print("El número debe ser negativo. Por favor ingrese un número.")
        # Si es negativo preguntar:
        else:
          # Calculamos el resto
          resto = int(num) % 2
          #Si es par
          if resto == 0:
            return print(f'El número ingresado es {int(num)}')
          # Si es impar
          else:
            return print(f'El número ingresado {int(num)} es IMPAR')

# Prueba de la funcion
prueba_num_negativo = numeros_negativo()
prueba_num_negativo

"""**EJERCICIO 7 VECTORES CON CICLO FOR**

Solicitar al usuario que ingrese la cantidad de elementos del vector.
Ingresar cada elemento del vector y calcular su promedio.AYUDA: EL PROMEDIO ES LA SUMA DE TODOS LOS NÚMEROS DIVIDO LA CANTIDAD TOTAL.
Mostrar el vector.
"""

# Se ingresa el numero de valores que se necesita pedir al usuario
def promedios_vector(num_vectores):
  lista_numeros = []
  for i in range(1, num_vectores+1): # La generamos hasta 11 porque no incluye el 10
    num = int(input("Ingrese un numero "))
    # Los vamos guardando con append
    lista_numeros.append(num)
  # Hacemos la suma
  suma_lista_numeros = sum(lista_numeros)
  # Hacemos el promedio
  promedioVector = suma_lista_numeros/num_vectores
  return print(f'El promedio de los numeros ingresados es igual a {round(promedioVector,2)}')

# Prueba de la funcion
promedios_vector(3)

"""**EJERCICIO 8 LISTA CON CICLO FOR**

Solicitar a 10 usuario que ingresen los siguientes datos en el formato lista.

['NOMBRE','APELLIDO', 'DNI','GASTOS MENSUALES DE HOGAR']

Ingresar el final de la lista los siguientes usuarios:

['ESTEBAN','LOPEZ', '45675400','190800.80']

['NOELIA','ALEJA', '46906875','85900.50']

Mostrar el vector.
Eliminar el primer usuario de la lista.
"""

# Funcion que devuelve todos los usuarios ingresados
def solicitar_usuarios():
  lista_usuarios = []
   # Solo hicimos la prueba para que se agreguen  usuarios
  for i in range (1,3):#10+1):
     #Solicitamos al usuario los datos
    nombre = input("Ingrese su nombre ")
    apellido = input("Ingrese su apellido ")
    dni = int(input("Ingrese su DNI "))
    gastos = float(input("Ingrese sus gastos mensuales "))
    # Los concatenamos en una lista
    lista_datos = [nombre,apellido, dni,gastos]
    # Agregamos los datos a la lista
    lista_usuarios.append(lista_datos)
  #Retornamos lista
  return lista_usuarios

# Funcion que devuelve todos los usuarios ingresados eliminado el primero usuario ingresado
def solicitar_usuarios_primero():
  lista_usuarios = []
  # Solo hicimos la prueba para que se agreguen 3 usuarios
  for i in range (1,3):#10+1):
    #Solicitamos al usuario los datos
    nombre = input("Ingrese su nombre ")
    apellido = input("Ingrese su apellido ")
    dni = int(input("Ingrese su DNI "))
    gastos = float(input("Ingrese sus gastos mensuales "))
    # Los concatenamos en una lista
    lista_datos = [nombre,apellido, dni,gastos]
    # Agregamos los datos a la lista
    lista_usuarios.append(lista_datos)
  # Eliminamos el primer usuario ingresado
  lista_usuarios.pop(0)
  #Retornamos lista
  return lista_usuarios

# Pruebas de las funciones
print("--------- Probando la primera funcion solicitar_usuarios()  ---------")
usuarios_completo = solicitar_usuarios()
print("--------- Probando la segunda funcion solicitar_usuarios_primero()  ---------")
usuarios_primero = solicitar_usuarios_primero()

# Resultados de las funciones
print("--------- Resultados la primera funcion solicitar_usuarios()  ---------")
print(usuarios_completo)
print("--------- Resultados la segunda funcion solicitar_usuarios_primero()  ---------")
print(usuarios_primero )

"""para probar como funciona cambien en el for el 10 por 2 y ejecuten ingrese los datos que le pidan y al terminar todo vuelvan a poner 10 en el for

**EJERCICIO 9 LISTA CON CICLO FOR**

Buscar en la web los datos pablacionales de todas las provicias de Argentina , generando una lista con los siguiente información.

['PROVINCIA','CANTIDAD DE HABITANTES', 'CONSUMO ELECTRICO PER CAPITA','SUPERFICIE EN M^2']



Mostrar TODOS LOS DATOS DEL LISTADO.
"""

#Los datos son: [ID, 'PROVINCIA','CANTIDAD DE HABITANTES', 'SUPERFICIE EN KM^2']
  datos_provincias = [
        [1,'Buenos Aires',17569053, 307571],
        [2,'Catamarca', 429556, 102602],
        [3,'Chaco', 1142963,99633],
        [4,'Chubut',603120, 224686],
        [5,'Córdoba',3978984,165321],
        [6,'Corrientes',1197553, 88199],
        [7,'Entre Ríos', 1426426, 78781],
        [8,'Formosa',606041,72066],
        [9,'Jujuy',797955,53219],
        [10, 'La Pampa',366022,143440],
        [11, 'La Rioja',384607,89680],
        [12, 'Mendoza',2014533,148827],
        [13, 'Misiones',1280960,29801],
        [14, 'Neuquén',726590,94078 ],
        [15, 'Río Negro',762067, 203013],
        [16, 'Salta',1440672,155488],
        [17, 'San Juan',818234,89651],
        [18, 'San Luis',540905,76748],
        [19, 'Santa Cruz',333473,243943],
        [20, 'Santa Fe',3556522,133007],
        [21, 'Santiago del Estero',1054028,136351],
        [22, 'Tierra del Fuego, Antártida e Islas del Atlántico Sur',190641,987168],
        [23, 'Tucumán',1703186,22524]
    ]
  print(datos_provincias)

"""**EJERCICIO 10 LISTAS**

Crear una lista con información de estudianes de un colegio donde incluya los siguientes items:


*   curso y división del aula del alumno
*   nombre y apellidos
*   DNI
*   cantidad de notas en el primer trimestre
*   INGRESAR CADA UNA DE ESAS NOTAS, POR EL USUARIO
*   promedio del trimestre

Mostrar todos los nombres y apellidos de los  alumnos
Mostrar los alumnos con promedio mayor o igual a 6



"""

# Funcion para crear y mostrar la lista de estudiantes de un colegio
# Se deben ingesar 2 parametros: numero de notas a ingresar y numero de alumnos del colegio con notas
def info_alumnos (num_notas, num_alumnos):
  #Creamos lista vacia donde se agregaran los datos de los estudiantes
  lista_alumnos = []
  for j in range(1,num_alumnos+1):
    # Solcitamos datos de los alumnos del colegio
    nombre = input("Ingrese su nombre ")
    apellido = input("Ingrese su apellido ")
    dni = int(input("Ingrese su DNI "))
    curso = input("Ingrese el curso ")
    division = input("Ingrese la comision ")
     #Creamos lista vacia donde se agregaran las notas de cada uno de los estudiantes
    lista_notas = []
    # Solicitamos cada una de las notas
    for i in range (1,num_notas+1):
      notas = float(input("Ingrese la nota "))
      lista_notas.append(notas)
    # Hacemos el promedio
    promedio = round(sum(lista_notas)/num_notas,2)
    # Hacemos una lista con los datos de interes por cada alumno
    alumno = [nombre,apellido, dni,curso,division,promedio]
      # Agregamos los datos a la lista
    lista_alumnos.append(alumno)
  # Devolvemos la lista con los datos de los alumnos y su promedio
  return lista_alumnos

# Prueba de la funcion
prueba = info_alumnos(3,48)

# Generamos una lista vacia para mostrar los alumnos con promedio mayor o igual a 6
lista_aprobados = []
for indice, valor in enumerate(prueba):
  #recorremos la lista, especificamente tomamos el valor del promedio y lo comparamos
  if valor[5] >= 6:
    # Generamos una lista con los datos de los alumnos aprobados
    lista_aprobados.append(valor)
    # Ademas, de la lista hacemos un print que nos dia el nombre y apellido del alumno aprobado
    print(f"{valor[0]} {valor[1]} esta APROBADO")
  else:
    # Nombre y apellido del alumno NO aprobado
    print(f"{valor[0]} {valor[1]} esta desaprobado")

print("---------  LISTA DE APROBADOS  ---------")
print(lista_aprobados)