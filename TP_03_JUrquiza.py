# -*- coding: utf-8 -*-
"""Copia de PRACTICO3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17KBH0zTmegJ5jm6HfXgiPrv7S_K4mPEh

# TRABAJO PRACTICO N 3

***TEMAS A DESARROLLAR:***

Nociones de Probabilidad, simulación de procesos aleatorios, cálculo de parámetros estadisticos: Media o Valor Esperado(PROMEDIO), Mediana, Desvio Estandar. DISTRIBUCIONES DE PROABABILIDAD más frecuentes, por ejemplo la Normal.

## Funciones estadísticas para análisis exploratorio de datos
A continuación se presentan ejemplos de funciones estadísticas para el análisis exploratorio de datos utilizando NumPy:

#### Crear array aleatorio
En esta celda, se utiliza la función np.random.rand() de NumPy para crear un array de números aleatorios con una forma específica. Luego, se imprime el array.
"""

import numpy as np
random_array = np.random.randint(0,10, (4,3))
print("Array aleatorio:", random_array)

"""#### Media
En esta celda, se crea un array 'array' y se utiliza la función np.mean() de NumPy para calcular la media del array. Luego, se imprime el resultado.
"""

array = np.array([1, 2, 3, 4, 5])
media = np.mean(array)
print("Media:", media)

"""#### Desviación estándar
En esta celda, se crea un array 'array' y se utiliza la función np.std() de NumPy para calcular la desviación estándar del array. Luego, se imprime el resultado.
"""

array = np.array([1, 2, 3, 4, 5])
desviacion_estandar = np.std(array)
print("Desviación estándar:", desviacion_estandar)

"""#### Varianza
La función np.var() se utiliza para calcular la varianza de un array.
Ejemplo de uso:
"""

array = np.array([1, 2, 3, 4, 5])
varianza = np.var(array)
print("Varianza:", varianza)

"""#### Valor mínimo
En esta celda, se crea un array 'array' y se utiliza la función np.min() de NumPy para encontrar el valor mínimo del array. Luego, se imprime el resultado.
"""

array = np.array([1, 2, 3, 4, 5])
matriz=np.random.randint(-3,3,(5,5))
#minimo = np.min(array)
minimo = np.min(matriz, axis=0)
print("Valor mínimo:", minimo)

minimo2 = np.min(matriz, axis=1)
print("Valor mínimo 2:", minimo2)
print( matriz)

"""#### Valor máximo
En esta celda, se crea un array 'array' y se utiliza la función np.max() de NumPy para encontrar el valor máximo del array. Luego, se imprime el resultado.
"""

maximo = np.max(array)
print("Valor máximo:", maximo)

"""#### Gráfico de dispersión
En esta celda, se crea un array 'x' con valores aleatorios y un array 'y' con valores aleatorios. Luego, se utiliza la biblioteca Matplotlib para trazar un gráfico de dispersión con 'x' en el eje x y 'y' en el eje y. También se agrega etiquetas y un título al gráfico.
"""

import matplotlib.pyplot as plt

x = np.random.rand(100)
y = np.random.rand(100)

plt.scatter(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Gráfico de dispersión')
plt.show()

"""En esta celda, se crea un array 'data' con valores aleatorios siguiendo una distribución normal. Luego, se utiliza la biblioteca Matplotlib para trazar un histograma de 'data'. También se agrega etiquetas y un título al gráfico."""

data = np.random.normal(0, 1, 1000)

plt.hist(data, bins=30)
plt.xlabel('Valor')
plt.ylabel('Frecuencia')
plt.title('Histograma')
plt.show()

"""#### Mediana
La función np.median() se utiliza para calcular la mediana de un array.
Ejemplo de uso:
"""

array = np.array([1, 2, 3, 4, 5])
mediana = np.median(array)
print("Mediana:", mediana)

"""#### Percentiles
La función np.percentile() se utiliza para calcular los percentiles de un array.
Ejemplo de uso:
"""

array = np.array([1, 2, 3, 4, 5])
percentil_50 = np.percentile(array, 50)
print("Percentil 50:", percentil_50)

"""# EJEMPLOS Y APLICACIÓNES

***APLICACIÓN DE PROBABILIDAD***

Se Realiza el lanzamiento de un dado EQUILIBRADO JUSTO, de manera reiterada con las mismas condiciones, y se anotan sus resultados= CARA O CRUZ.

Se le pide al usuario que defina la cantidad N de lanzamientos y se calcula su frecuencia relativa= 'PROBABILIDAD' de obtener cara o cruz. Se obtiene los siguientes resultados:
"""

import numpy as np
n=int(input('ingrese la cantidad de simulación o lanzamientos '))

#========= FORMA 1 DE SIMULAR LANZAMIENTO DE UN DADO============
dado=[]
cara=0
cruz=0
for i in range(n):
  dado.append(np.random.rand(1))
  dado1=np.array(dado)
  if dado1[i]<0.5:
    #print('salio cara')
    #print(dado[i])
    cara +=1
  else:
    #print('salio cruz')
    #print(dado[i])
    cruz +=1
print(dado)

#  mostrar la probailidad frecuencista de el lanzamiento de un dado
prom_cara=cara/n
prom_cruz=cruz/n
print('la probabilidad aproximada en '+str(n)+' lanzamientos de sacar CARA es:', prom_cara)
print('la probabilidad aproximada en '+str(n)+' lanzamientos de sacar CRUZ es:', prom_cruz)

#========== FORMA COMPACTA DE SIMULAR USANDO NUMPY===========
m=int(input('ingrese la cantidad de simulación o lanzamientos'))
lanzamientos = np.random.randint(0, 2, m)

# Calcular las probabilidades

probabilidad_cara = np.sum(lanzamientos ==0 ) / len(lanzamientos)
probabilidad_sello = np.sum(lanzamientos== 1) / len(lanzamientos)

print(f"Probabilidad de cara: {probabilidad_cara:.2f}")
print(f"Probabilidad de sello: {probabilidad_sello:.2f}")
print(lanzamientos)

import matplotlib.pyplot as plt
x=np.array(range(2))
y=np.array([probabilidad_cara, probabilidad_sello])

plt.bar(x,y)
plt.xlabel('Opción')
plt.ylabel('Frecuencia relativa')
plt.title('Histograma del lanzamiento de una moneda equilibrada')
plt.show()

"""# EJERCICIOS

##***EJERCICIO 1***

Simular el lanzamiento de un dado eqilibrado de 6 caras.


*   Mostrar la probabilida aproximada de obtener el número 2, 3 y 5
*   Graficar el histograma de las probabilidades
"""

#Simular el lanzamiento de un dado eqilibrado de 6 caras.
import numpy as np
import matplotlib.pyplot as plt

#========== FORMA COMPACTA DE SIMULAR USANDO NUMPY===========
#m=int(input('ingrese la cantidad de simulación o lanzamientos '))
m=1000
lanzamientos = np.random.randint(1, 7, m)
# Calcular las probabilidades

probabilidad_2= (np.sum(lanzamientos == 2 ) / len(lanzamientos))*100
probabilidad_3 = (np.sum(lanzamientos == 3) / len(lanzamientos))*100
probabilidad_5 = (np.sum(lanzamientos == 5) / len(lanzamientos))*100


print("-----------------  ESTADISTICAS  ----------------------")
print(f"Probabilidad de obtener un 2: {probabilidad_2:.2f}%")
print(f"Probabilidad de obtener un 3: {probabilidad_3:.2f}%")
print(f"Probabilidad de obtener un 5: {probabilidad_5:.2f}%")
print("-----------------  PLOT   ----------------------")
# Generamos el texto del % en formato str
probabilidad_1_str = str(round((np.sum(lanzamientos == 1 ) / len(lanzamientos))*100,2))+"%"
probabilidad_2_str = str(round((np.sum(lanzamientos == 2 ) / len(lanzamientos))*100,2))+"%"
probabilidad_3_str = str(round((np.sum(lanzamientos == 3 ) / len(lanzamientos))*100,2))+"%"
probabilidad_4_str = str(round((np.sum(lanzamientos == 4 ) / len(lanzamientos))*100,2))+"%"
probabilidad_5_str = str(round((np.sum(lanzamientos == 5 ) / len(lanzamientos))*100,2))+"%"
probabilidad_6_str =str(round((np.sum(lanzamientos == 6 ) / len(lanzamientos))*100,2))+"%"

#Plot - histograma
plt.hist(lanzamientos, bins=range(1,8),color = "lightsteelblue",alpha=0.4, edgecolor = 'black',  linewidth=0.8)
# Ejes + titulo
plt.xlabel('Valor')
plt.ylabel('Frecuencia')
plt.title('Histograma')

# Le ponemos el texto de los %
plt.text(1.22, 75, probabilidad_1_str, fontsize=8, color='black')
plt.text(2.22, 75, probabilidad_2_str, fontsize=8, color='black')
plt.text(3.22, 75, probabilidad_3_str, fontsize=8, color='black')
plt.text(4.22, 75, probabilidad_4_str, fontsize=8, color='black')
plt.text(5.22, 75, probabilidad_5_str, fontsize=8, color='black')
plt.text(6.22, 75, probabilidad_6_str, fontsize=8, color='black')
plt.show()

"""## ***EJERCICIO 2***

Simular el lanzamiento de un dado NO eqilibrado o cargado de 6 caras, de manera que las chances o probabilidades de salir 1 o 2 sean el doble de obtener otro resultado (3,4,5 o 6)


*   Mostrar la probabilida aproximada de obtener el número 2, 3 y 5
*   Graficar el histograma de las probabilidades


"""

import random
import numpy as np
import matplotlib.pyplot as plt

# En un dado no equilibrado o cargado, las probabilidades no son iguales.
datos = [1, 2, 3, 4, 5, 6]
probabilidad = [0.3, 0.3, 0.1, 0.1, 0.1, 0.1]  # Suma total debe ser 1.0

lanzamientos = []

for j in range (1000):
  muestra = random.choices(range(1, 7), probabilidad)[0]
  lanzamientos.append(muestra)
# Ejemplo de uso
#print(data)


media = np.mean(lanzamientos)
print("-----------------  ESTADISTICAS  ----------------------")
print(f"Media: {media:.2f}%")
print("-----------------  PLOT   ----------------------")
#Tranformamos a array de numpy
lanzamiento = np.array(lanzamientos)
# Generamos el texto del % en formato str
probabilidad_1_str = str(round((np.sum(lanzamiento == 1 ) / len(lanzamiento))*100,2))+"%"
probabilidad_2_str = str(round((np.sum(lanzamiento == 2 ) / len(lanzamiento))*100,2))+"%"
probabilidad_3_str = str(round((np.sum(lanzamiento == 3 ) / len(lanzamiento))*100,2))+"%"
probabilidad_4_str = str(round((np.sum(lanzamiento == 4 ) / len(lanzamiento))*100,2))+"%"
probabilidad_5_str = str(round((np.sum(lanzamiento == 5 ) / len(lanzamiento))*100,2))+"%"
probabilidad_6_str =str(round((np.sum(lanzamiento == 6 ) / len(lanzamiento))*100,2))+"%"


#Plot - histograma
plt.hist(lanzamiento, bins=range(1,8),color = "lightsteelblue",alpha=0.4, edgecolor = 'black',  linewidth=0.8)
# Ejes + titulo
plt.xlabel('Valor')
plt.ylabel('Frecuencia')
plt.title('Histograma con python')
plt.axvline(media, color = "red", linestyle = "dashed", linewidth = 2, label = "Media")
# Le ponemos el texto de los %
plt.text(1.22, 55, probabilidad_1_str, fontsize=8, color='black')
plt.text(2.22, 55, probabilidad_2_str, fontsize=8, color='black')
plt.text(3.22, 55, probabilidad_3_str, fontsize=8, color='black')
plt.text(4.22, 55, probabilidad_4_str, fontsize=8, color='black')
plt.text(5.22, 55, probabilidad_5_str, fontsize=8, color='black')
plt.text(6.22, 55, probabilidad_6_str, fontsize=8, color='black')
plt.legend()
plt.show()

# Forma con numpy
np.random.seed(42)#nos permite generar datos que no se alteraran
datos = [1, 2, 3, 4, 5, 6]
probabilidad = [0.3, 0.3, 0.1, 0.1, 0.1, 0.1]  # Suma total debe ser 1.0
lanzamiento_np = np.random.choice(range(1, 7),size=1000, p= probabilidad)
media_np = np.mean(lanzamiento_np)

# Generamos el texto del % en formato str
probabilidad_1_str_np = str(round((np.sum(lanzamiento_np == 1 ) / len(lanzamiento_np))*100,2))+"%"
probabilidad_2_str_np = str(round((np.sum(lanzamiento_np== 2 ) / len(lanzamiento_np))*100,2))+"%"
probabilidad_3_str_np = str(round((np.sum(lanzamiento_np == 3 ) / len(lanzamiento_np))*100,2))+"%"
probabilidad_4_str_np = str(round((np.sum(lanzamiento_np == 4 ) / len(lanzamiento_np))*100,2))+"%"
probabilidad_5_str_np = str(round((np.sum(lanzamiento_np == 5 ) / len(lanzamiento_np))*100,2))+"%"
probabilidad_6_str_np =str(round((np.sum(lanzamiento_np == 6 ) / len(lanzamiento_np))*100,2))+"%"


#Plot - histograma
#plt.hist(lanzamiento_np, bins=np.range(1,8)-0.5,color = "lightsteelblue",alpha=0.4, edgecolor = 'black',  linewidth=0.8)
plt.hist(lanzamiento_np, bins=np.arange(1,8)-0.5,color = "lightsteelblue",alpha=0.4, edgecolor = 'black',  linewidth=0.8)
# Ejes + titulo
plt.xlabel('Valor')
plt.ylabel('Frecuencia')
plt.title('Histograma con Numpy')
plt.axvline(media_np, color = "red", linestyle = "dashed", linewidth = 2, label = "Media")
# Le ponemos el texto de los %
plt.text(0.8, 55, probabilidad_1_str_np, fontsize=8, color='black')
plt.text(1.8, 55, probabilidad_2_str_np, fontsize=8, color='black')
plt.text(2.8, 55, probabilidad_3_str_np, fontsize=8, color='black')
plt.text(3.8, 55, probabilidad_4_str_np, fontsize=8, color='black')
plt.text(4.8, 55, probabilidad_5_str_np, fontsize=8, color='black')
plt.text(5.8, 55, probabilidad_6_str_np, fontsize=8, color='black')
plt.legend()
plt.show()

"""## EJERCICIO 3

 Realizar la simulación del juego {piedra,papel , tijera} donde el resultado de esta simulación deberá ser lo que mi oponente elije. No debe considerarse la simulación de mi elección.



*   Calcular la probailidad aproximada que mi oponente elija, 'piedra', 'papel', o 'tijera', en N jugadas.
*   Realizar un grafico de barra mostrando estas probabilidad. Concluir algo sobre las probabilidades de estos resultados, cuando el número de jugadas se incrementa bastante.



"""

import numpy as np
import matplotlib.pyplot as plt
# Juego
n_jugadas = 100
probabilidad = 1/3
datos = ["piedra","papel","tijera"]
juego = np.random.choice(datos,size=n_jugadas, p= [probabilidad]*len(datos))
# Probabilidadaes
prob_piedra =  str(round((np.sum(juego == "piedra") / len(juego))*100,2))+"%"
prob_papel = str(round((np.sum(juego== "papel" ) / len(juego))*100,2))+"%"
prob_tijera = str(round((np.sum(juego == "tijera") / len(juego))*100,2))+"%"

# Print
print(f'Probabilidad de obtener piedra con {n_jugadas} jugadas es {prob_piedra}')
print(f'Probabilidad de obtener papel con {n_jugadas} jugadas es {prob_papel}')
print(f'Probabilidad de obtener tijera con {n_jugadas} jugadas es {prob_tijera}')


#Plot - histograma
plt.hist(juego, color = "#99d8c9",bins=np.arange(0,4)-0.5,alpha=0.4, edgecolor = 'black',rwidth=10,  linewidth=0.8)
# Ejes + titulo

plt.ylabel('Frecuencia')
plt.title(f'Probabilidad de Piedra-Papel-Tijera con {n_jugadas} jugadas')
plt.text(-0.1, 20, prob_piedra, fontsize=8, color='black')
plt.text(0.9, 20, prob_papel, fontsize=8, color='black')
plt.text(1.9, 20, prob_piedra, fontsize=8, color='black')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
# Funcion
def juego (n_jugadas):
  probabilidad = 1/3
  datos = ["piedra","papel","tijera"]
  # muestras aleatorias
  juego = np.random.choice(datos,size=n_jugadas, p= [probabilidad]*len(datos))
  # Probabilidad de cada una
  prob_piedra =  str(round((np.sum(juego == "piedra") / len(juego))*100,2))+"%"
  prob_papel = str(round((np.sum(juego== "papel" ) / len(juego))*100,2))+"%"
  prob_tijera = str(round((np.sum(juego == "tijera") / len(juego))*100,2))+"%"

  # Print
  print(f'Probabilidad de obtener piedra con {n_jugadas} jugadas es {prob_piedra}')
  print(f'Probabilidad de obtener papel con {n_jugadas} jugadas es {prob_papel}')
  print(f'Probabilidad de obtener tijera con {n_jugadas} jugadas es {prob_tijera}')


  #Plot - histograma
  plt.hist(juego, color = "#99d8c9",bins=np.arange(0,4)-0.5,alpha=0.4, edgecolor = 'black',rwidth=10,  linewidth=0.8)
  # Ejes + titulo

  plt.ylabel('Frecuencia')
  plt.title(f'Probabilidad de Piedra-Papel-Tijera con {n_jugadas} jugadas')
  plt.text(-0.1, 1, prob_piedra, fontsize=8, color='black')
  plt.text(0.9, 1, prob_papel, fontsize=8, color='black')
  plt.text(1.9, 1, prob_piedra, fontsize=8, color='black')
  return (plt.show())
# Pruebas
print("------- 10 pruebas  -------")
juego (10)
print("------- 100 pruebas  -------")
juego (100)
print("------- 1000 pruebas  -------")
juego (1000)
print("------- 10000 pruebas  -------")
juego (10000)

"""Concluir algo sobre las probabilidades de estos resultados, cuando el número de jugadas se incrementa bastante, los % se vuelven mas similares. La probabilidad se vuelve 1/3, mas similar

## EJERCICIO 4

Dada la base de datos de ventas diarias durante una semana, de un negocio con 4 productos.- VER EJERCICIO PARTE 2 PRACTICO N 2- Realizar el siguiente análisis de datos para poder obtener información y planificar una estrategia de ventas.


1.   Calcular la media en la ventas por cada producto y la mediana. Plotear estos nuevos datos en un gráfico de barra.
2.    Calcular la media en la ventas por DÍA y la mediana. Plotear estos nuevos datos en un gráfico de TRAZO DE LINEAS.
3.   Realizar una conclusión en función las graficas y sugerir al menos 5 estrategias de venta o inversión de manera de potenciar este negocio.
4.   Calcular el desvio estandar de los datos por cada producto y concluir para cada producto como es su rango de variabilidad en las ventas de los mismos.Plotear los datos de ventas de la semana de los productos con mayor y menor desvio estandar y evidenciar la variabilidad indicada en el parametro *'DESVIO ESTANDAR'*
"""

import numpy as np
import matplotlib.pyplot as plt



# Datos de ventas diarias de 4 productos durante una semana

ventas_diarias = np.array(
    #Lun,Mar,Mie,Jue,Vie,Sab,Dom
    [[20, 15, 25, 30, 18, 22, 24],  #Producto A
    [12, 20, 14, 8, 15, 18, 16],    #Producto B
    [35, 28, 32, 30, 26, 24, 30],   #Producto C
    [40, 38, 45, 42, 39, 41, 37]    #Producto D
    ]
)

#ESTADISTICAS
# Media por columnas, es decir media por dia
media_dia = np.mean(ventas_diarias, axis = 0)
# Media por filas, es decir media por producto
media_producto = np.mean(ventas_diarias, axis = 1)
# Mediana por columnas, es decir media por dia
mediana_dia = np.median(ventas_diarias, axis = 0)
# Mediana por filas, es decir media por producto
mediana_producto = np.median(ventas_diarias, axis = 1)
# Desviacion estandar por columnas, es decir media por dia
sd_dia = np.std(ventas_diarias, axis = 0)
# Desviacion estandar por filas, es decir media por producto
sd_producto = np.std(ventas_diarias, axis = 1)
min_sd_producto = np.min(sd_producto)
#print(media_producto)
productos = np.array(["A","B","C","D"])
dias = np.array(["Lun","Mar","Mie","Jue","Vie","Sab","Dom"])

# Buscamos el producto con menor y maxor desviacion estandar
min_sd_producto = 	np.where(sd_producto == np.min(sd_producto))
max_sd_producto = 	np.where(sd_producto == np.max(sd_producto))
# PLOT

fig, ax = plt.subplots(ncols=3, nrows=3, figsize=(16,11))
# Plots
ax[0][0].bar(x = productos, height=media_producto, label = "Media")
ax[0][1].bar(x = productos, height=mediana_producto,color = "#99d8c9",label ="Mediana")
ax[0][2].bar(x = productos, height=sd_producto,color = "red", label = "Desvio estandar")
ax[1][0].plot(dias, media_dia, label = "Media")
ax[1][0].plot( dias, mediana_dia,color = "#99d8c9",label ="Mediana")
ax[1][1].bar(x=dias,height=ventas_diarias[min_sd_producto][0],color="#c51b8a")
ax[1][2].bar(x=dias,height=ventas_diarias[max_sd_producto][0],color="#756bb1")
ax[2][0].plot( dias, ventas_diarias[0],color = "#c51b8a",label ="Producto A")
ax[2][0].plot( dias, ventas_diarias[1],color = "#2c7fb8",label ="Producto B")
ax[2][0].plot( dias, ventas_diarias[2],color = "#f03b20",label ="Producto C")
ax[2][0].plot( dias, ventas_diarias[3],color = "#2ca25f",label ="Producto D")
ax[2][1].plot(dias,ventas_diarias[min_sd_producto][0],color="#c51b8a")
ax[2][2].plot(dias,ventas_diarias[max_sd_producto][0],color="#756bb1")


#TITULOS
ax[0][0].set_title("Media por producto",fontsize=13,fontdict={'family': 'serif', 'color' : 'Black', 'weight': 'bold', 'size': 10})
ax[0][1].set_title("Mediana por producto",fontsize=13,fontdict={'family': 'serif', 'color' : 'Black', 'weight': 'bold', 'size': 10})
ax[0][2].set_title("Variabilidad diaria de los productos'",fontsize=13,fontdict={'family': 'serif', 'color' : 'Black', 'weight': 'bold', 'size': 10})
ax[1][0].set_title("Media - mediana diaria",fontsize=13,fontdict={'family': 'serif', 'color' : 'Black', 'weight': 'bold', 'size': 10})
ax[1][1].set_title(f'Menor desviacion estandar producto: {productos[min_sd_producto][0]} = { round(np.min(sd_producto),2)}',fontsize=9,fontdict={'family': 'serif', 'color' : 'Black', 'weight': 'bold', 'size': 10})
ax[1][2].set_title(f'Mayor desviacion estandar producto: {productos[max_sd_producto][0]} = { round(np.max(sd_producto),2)}',fontsize=9,fontdict={'family': 'serif', 'color' : 'Black', 'weight': 'bold', 'size': 10})
ax[2][0].set_title("Variabilidad diaria de ventas",fontsize=11,fontdict={'family': 'serif', 'color' : 'Black', 'weight': 'bold', 'size': 10})
ax[2][1].set_title(f'Menor desviacion estandar producto: {productos[min_sd_producto][0]} = { round(np.min(sd_producto),2)}',fontsize=9,fontdict={'family': 'serif', 'color' : 'Black', 'weight': 'bold', 'size': 10})
ax[2][2].set_title(f'Mayor desviacion estandar producto: {productos[max_sd_producto][0]} = { round(np.max(sd_producto),2)}',fontsize=9,fontdict={'family': 'serif', 'color' : 'Black', 'weight': 'bold', 'size': 10})
#Leyendas
ax[1][0].legend( frameon = True, markerfirst = False, fontsize = 10,loc='upper right')
ax[2][0].legend( frameon = True, markerfirst = False, fontsize = 10,loc='lower right')

#ticks
ax[0][0].yaxis.set_ticks(np.arange(0, 52, 10))
ax[0][1].yaxis.set_ticks(np.arange(0, 52, 10))
ax[0][2].yaxis.set_ticks(np.arange(0, 5, 1))
ax[1][0].yaxis.set_ticks(np.arange(0, 52, 10))
ax[1][1].yaxis.set_ticks(np.arange(0, 52, 10))
ax[1][1].yaxis.set_ticks(np.arange(0, 52, 10))
ax[2][0].yaxis.set_ticks(np.arange(0, 52, 10))
ax[2][1].yaxis.set_ticks(np.arange(0, 52, 10))
ax[2][2].yaxis.set_ticks(np.arange(0, 52, 10))

# Configuration of subplots
plt.subplots_adjust(left=0.125,
            bottom=0.1,
            right=0.9,
            top=0.9,
            wspace=0.2,
            hspace=0.4)

plt.show()

"""## EJERCICIO 5  

Solicitar al usuario que ingrese la cantidad N de datos a cargar. Luego generar de manera aleatoria los siguientes datos:

* SEXO= 'MASCULINO', 'FEMENINO','NO ESPECIFICA'
* EDAD= entre 28 y 60 años
* ALTURA= entre un rango de 165.0 mts hasta 210 mts
* PESO= entre un rango de 50  y 110 kg
* HORAS DE DESCANSO diario= un número decimal
* HORAS DE TRABAJO/ ESTUDIO diario= un número decimal
* HORAS DE EJERCICIOS diario= un número decimal

REalizar las siguientes indicaciones y extraer concluisiones sobre la información y la pooblación muestreada.

1.   Generar un array de dimensión 2 (matriz), con todos los datos ordenados, permitiendo visualizarlos como tabla.
2.   Suponiendo que la distribución de probabilidad de los datos muestrados de las N personas, se distribuyen en forma NORMAL. Encontrar la media en los datos de altura, peso, y horas de descanso, trabajo y ejercicios.
3.  Graficar la muestra o distribución de los datos  de pesos , y alturas en graficas separadas. Indicar el grado de variabilidad de sus datos
4.  Plotear de manera conjunta y encontrar si presentan correlación los datos de peso vs altura,
5. Plotear de manera conjunta los datos de horas de descanso, estudio y ejercicio


"""

import matplotlib.pyplot as plt
import numpy as np
#n = int(input("Ingrese un valor "))
n = 100
sexo = np.random.choice(["M","F","N"],size=n, p= [1/3]*3)
edad = np.random.randint(28, 60+1, n)
altura =  np.random.uniform(165.0, 210, size=n)
altura_round = [round(num, 2) for num in altura]
peso = np.random.randint(50, 110+1, n)
horas_descanso = np.random.rand(n) #Pregunta esto siempre me da entre 0 - 1?? tomamos valor asi?
horas_activas = np.random.rand(n)
horas_ejercicio = np.random.rand(n)

df = np.array([sexo,edad,altura_round,peso,horas_descanso,horas_activas,horas_ejercicio])
mean_altura = np.mean(altura_round)
sd_altura = np.std(altura_round)
mediana_altura= np.median(altura_round)
print(f"La media de la altura es igual a {round(mean_altura,2)} y la mediana es igual a {round(mediana_altura,2)}, con una variabilidad de {round(sd_altura,2)}")

mean_peso= np.mean(peso)
sd_peso = np.std(peso)
mediana_peso = np.median(peso)
print(f"La media de la peso es igual a {round(mean_peso,2)} y la mediana es igual a {round(mediana_peso,2)}, con una variabilidad de {round(sd_peso,2)}")

mean_horas_descanso= np.mean(horas_descanso)
print(f"La media de las horas de descansoes igual a {round(mean_horas_descanso,2)}")
mean_horas_activas= np.mean(horas_activas)
print(f"La media de las horas de trabajo igual a {round(mean_horas_activas,2)}")

mean_horas_ejercicio = np.mean(horas_ejercicio)
print(f"La media de las horas de ejercicio igual a {round(mean_horas_ejercicio,2)}")


#Graficar la muestra o distribución de los datos de pesos , y alturas en graficas separadas. Indicar el grado de variabilidad de sus datos
fig, ax = plt.subplots(ncols=3,nrows=2, figsize=(18,10))
# Histogramas
ax[0][0].hist(peso,bins=np.arange(50, 110+1)-0.5, color = "lightsteelblue",alpha=0.4, edgecolor = 'black',  linewidth=0.8,width=1)
ax[0][1].hist(altura_round,bins=np.arange(160,210+1)-0.5,color = "#99d8c9",alpha=0.4, edgecolor = 'black',  linewidth=0.8)

# Medias
ax[0][0].axvline(mean_peso,  color='red', linestyle='dashed',linewidth= 1.8, label= 'Media')
ax[0][1].axvline(mean_altura,  color='red', linestyle='dashed',linewidth= 1.8, label= 'Media')

# Mediana
ax[0][0].axvline(mediana_peso,  color='green', linestyle='dashed',linewidth= 1.8, label= 'Mediana')
ax[0][1].axvline(mediana_altura,  color='green', linestyle='dashed',linewidth= 1.8, label= 'Mediana')

# SD
ax[0][0].errorbar(mean_peso,1,xerr=sd_peso,color='blue',fmt='o',markersize=10,label='Desvio')
ax[0][1].errorbar(mean_altura,1,xerr=sd_altura,color='blue',fmt='o',markersize=10,label='Desvio')


#Plotear de manera conjunta y encontrar si presentan correlación los datos de peso vs altura,
from sklearn.linear_model import LinearRegression
linear_regresion = LinearRegression()
peso_reshape = peso.reshape((100, 1))
altura_reshape = altura.reshape((100, 1))
linear_regresion.fit(peso_reshape ,altura_reshape )
li_predict = linear_regresion.predict(peso_reshape)
ax[0][2].plot(peso_reshape,li_predict,c="blue",label='Regresion lineal',linestyle="--",linewidth=1)
ax[0][2].scatter(peso_reshape ,altura_reshape ,  c="black" ,edgecolors= "black",alpha=0.7,  s=15)

#Plotear de manera conjunta los datos de horas de descanso, estudio y ejercicio
# Histogramas
ax[1][0].hist(horas_descanso, color = "#bcbddc",alpha=0.4, edgecolor = 'black',  linewidth=0.8)
ax[1][1].hist(horas_activas,color = "#fec44f",alpha=0.4, edgecolor = 'black',  linewidth=0.8)
ax[1][2].hist(horas_ejercicio,color = "#fa9fb5",alpha=0.4, edgecolor = 'black',  linewidth=0.8)

# Ejes + titulo
ax[0][0].set_title('Peso')
ax[0][1].set_title('Altura')
ax[0][2].set_title('Correlacion Peso vs Altura')

ax[1][0].set_title('Horas descanso')
ax[1][1].set_title('Horas trabajo')
ax[1][2].set_title('Horas ejercicio')
# Legenda
ax[0][0].legend()
ax[0][1].legend()
ax[0][2].legend()

# EJES
ax[0][0].set_ylabel('Frecuencia')
ax[0][0].set_xlabel('Valor')
ax[0][1].set_ylabel('Frecuencia')
ax[0][1].set_xlabel('Valor')
ax[0][2].set_ylabel('Altura')
ax[0][2].set_xlabel('Peso')


# Configuration of subplots
plt.subplots_adjust(left=0.125,
            bottom=0.1,
            right=0.9,
            top=0.9,
            wspace=0.2,
            hspace=0.4)




plt.show()

# Mismo ejemplo pero con un DF de pandas
# Para unir todos los array usamos numpy. De esta forma podemos plotear todos los datos juntos
import matplotlib.pyplot as plt
import pandas as pd
data = {
    'sexo':sexo,
    "edad": edad,
    "altura": altura,
    "altura_round":altura_round,
    "peso": peso,
    "horas_descanso":horas_descanso,
    "horas_activas":horas_activas,
    "horas_ejercicio":horas_ejercicio

}
df = pd.DataFrame(data)
#print(df)
#Graficar la muestra o distribución de los datos de pesos , y alturas en graficas separadas. Indicar el grado de variabilidad de sus datos
fig, ax = plt.subplots(ncols=3,nrows=2, figsize=(18,10))
# Histogramas
ax[0][0].hist(df['peso'],bins=np.arange(50, 110+1)-0.5, color = "lightsteelblue",alpha=0.4, edgecolor = 'black',  linewidth=0.8,width=1)
ax[0][1].hist(df['altura_round'],bins=np.arange(160,210+1)-0.5,color = "#99d8c9",alpha=0.4, edgecolor = 'black',  linewidth=0.8)

# Medias
ax[0][0].axvline(mean_peso,  color='red', linestyle='dashed',linewidth= 1.8, label= 'Media')
ax[0][1].axvline(mean_altura,  color='red', linestyle='dashed',linewidth= 1.8, label= 'Media')

# Mediana
ax[0][0].axvline(mediana_peso,  color='green', linestyle='dashed',linewidth= 1.8, label= 'Mediana')
ax[0][1].axvline(mediana_altura,  color='green', linestyle='dashed',linewidth= 1.8, label= 'Mediana')

# SD
ax[0][0].errorbar(mean_peso,1,xerr=sd_peso,color='blue',fmt='o',markersize=10,label='Desvio')
ax[0][1].errorbar(mean_altura,1,xerr=sd_altura,color='blue',fmt='o',markersize=10,label='Desvio')


#Plotear de manera conjunta y encontrar si presentan correlación los datos de peso vs altura,
from sklearn.linear_model import LinearRegression
linear_regresion = LinearRegression()
peso_reshape = peso.reshape((n, 1))
altura_reshape = altura.reshape((n, 1))
linear_regresion.fit(peso_reshape ,altura_reshape )
li_predict = linear_regresion.predict(peso_reshape)
ax[0][2].plot(df['peso'],li_predict,c="blue",label='Regresion lineal',linestyle="--",linewidth=1)
ax[0][2].scatter(df['peso'] ,df['altura'] ,  c="black" ,edgecolors= "black",alpha=0.7,  s=15)

#Plotear de manera conjunta los datos de horas de descanso, estudio y ejercicio
# Histogramas
ax[1][0].hist(df['horas_descanso'], color = "#bcbddc",alpha=0.4, edgecolor = 'black',  linewidth=0.8)
ax[1][1].hist(df['horas_activas'],color = "#fec44f",alpha=0.4, edgecolor = 'black',  linewidth=0.8)
ax[1][2].hist(df['horas_ejercicio'],color = "#fa9fb5",alpha=0.4, edgecolor = 'black',  linewidth=0.8)

# Ejes + titulo
ax[0][0].set_title('Peso')
ax[0][1].set_title('Altura')
ax[0][2].set_title('Correlacion Peso vs Altura')

ax[1][0].set_title('Horas descanso')
ax[1][1].set_title('Horas trabajo')
ax[1][2].set_title('Horas ejercicio')
# Legenda
ax[0][0].legend()
ax[0][1].legend()
ax[0][2].legend()

# EJES
ax[0][0].set_ylabel('Frecuencia')
ax[0][0].set_xlabel('Valor')
ax[0][1].set_ylabel('Frecuencia')
ax[0][1].set_xlabel('Valor')
ax[0][2].set_ylabel('Altura')
ax[0][2].set_xlabel('Peso')


# Configuration of subplots
plt.subplots_adjust(left=0.125,
            bottom=0.1,
            right=0.9,
            top=0.9,
            wspace=0.2,
            hspace=0.4)




plt.show()



"""## EJERCICIO 6

Se realiza una encuesta a N usuario donde se registran los siguientes datos.

['DNI','GASTOS MENSUALES DE HOGAR','INGRESOS MENSUALES POR HOGAR', 'CANTIDAD DE MIEMBROS QUE VIVEN POR HOGAR','GASTO MENSUAL EN LINEA TELEFÓNICA', 'GASTO MENSUAL POR PAGO DE INTERNET' ]

Realizar la simulación de la carga de datos utilizando la siguiente información adicional:


1.   El 70 % de los encuestados son jóvenes entre 15 y 21 años, el 10% son mayores de 60 años. Sugerencia, utilizar esto para generar los DNI
2.   Los encuestados son de la provincia de Cordoba. Además el 80 % de la población de esa provincia tiene un grupo familiar de 5 personas. Con ingresos mensuales promedio de $258.000
2.   Cerca del 80 % de los encuestados Gastan el 90% de sus ingresos, el resto gasta el 80% de sus ingresos.Ayuda, para simular la cantidad de miembros utilizar la distribución normal.
3.  Del gasto Total por hogar se sabe que se abona un 15 % en telefonía y un 7.8% en servicio de internet.

Con la información proporcionada, realizar la simulación de las encuestas de 100 y 1000 personas.

*   Calcular el valor medio y desvio estandar de los gastos mensuales, ingresos mensuales y pagos de servicios.
*   Plotear los datos de los ingesos , y gastos en gráficos de barra por separado y evidenciar la media y desvio estandar.
*   Calcular la proporciona de jóvenes menores a 21 encuestados. Mostrar sus datos de grupos familiares, gastos en servicios de internet y telefonía. Concluir algo en base a esta información.
*   Realizar un histograma con el dato del grupo familiar, y concluir algo acerca de la distribución de probabilidad.



"""

n = 10  # encuestas
edad_jovenes = np.random.randint(15, 22, size=int(n * 0.7))  # 15 y 21
edad_mayores = np.random.randint(60, 101, size=int(n * 0.1))
gastos = np.random.randint(60, 101, size=int(n * 0.1))